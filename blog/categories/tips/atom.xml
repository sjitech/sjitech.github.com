<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | Technology of SJI]]></title>
  <link href="http://sjitech.github.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://sjitech.github.io/"/>
  <updated>2013-12-20T16:39:07+09:00</updated>
  <id>http://sjitech.github.io/</id>
  <author>
    <name><![CDATA[株式会社SJI先端技術研究センター]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第一回社内技術講演の資料]]></title>
    <link href="http://sjitech.github.io/blog/2013/12/20/sji-internal-tech-talk-01/"/>
    <updated>2013-12-20T15:48:00+09:00</updated>
    <id>http://sjitech.github.io/blog/2013/12/20/sji-internal-tech-talk-01</id>
    <content type="html"><![CDATA[<p>2013年12月18日の午後に第一回の社内向けの技術講演を行いました。講演資料をここで公開します。</p>

<p>社外でもダウンロードできますので、一部内容を添削してアップロードしました。</p>

<!-- more -->


<h2>ビッグデータとは</h2>

<p>ビッグデータの最新動向、業界事例を紹介しました。</p>

<p><a href="/downloads/presentation/bigdata.pdf">ビッグデータとは？</a></p>

<h2>CassandraからNoSQLを学ぶ</h2>

<p>Cassandraの最新版を解説しながら、NoSQLの関連技術を紹介しました。アニメーションが多いですが、PPTファイルをそのままアップロードします。</p>

<p><a href="/downloads/presentation/Nosql_Cassandra_blog.ppsx">CassandraからNoSQLを学ぶ</a></p>

<p>何かご指摘があれば、コメントとかメールとかご連絡頂ければと思います。</p>

<p>今年もいろいろとご指導を承り、ありがとうございました。 来年も頑張りますので、本年同様によろしくお願いいたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsは予想通りオプティマイズされたか？ (大量タイマー)]]></title>
    <link href="http://sjitech.github.io/blog/2013/12/19/doesnodejsoptimized/"/>
    <updated>2013-12-19T10:34:00+09:00</updated>
    <id>http://sjitech.github.io/blog/2013/12/19/doesnodejsoptimized</id>
    <content type="html"><![CDATA[<p>Node.jsのタイマーの使用を調査しました。</p>

<!-- more -->


<p>Javascriptで大量タイマーを利用した場合、普通の実装では、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="nx">node_js_check_event</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="err">すべてのタイマーを一つずつチェック</span>  <span class="o">===&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="err">一つずつは効率悪い、オプティマイズすべき。</span>
</span><span class='line'><span class="err">タイムアウト付き、他のイベントをチェック</span> <span class="p">(</span><span class="nx">epoll</span><span class="err">など</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="err">イベントをディスパッチ</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上記「すべてのタイマーを一つずつチェック」をオプティマイズすべきと思います。<br/>
オプティマイズ方法は、B-TREEみたいな構造でタイマーのfireTimeを保存し、<br/>
チェックはB-TREEから最小fireTimeだけをチェックすれば終わり。</p>

<p>Node.jsはどのように実装したのか？ソースを見てみると、確かにオプティマイズしました！：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>closest timer of all timers <a href="https://github.com/joyent/node/blob/master/deps/uv/src/unix/timer.c">https://github.com/joyent/node/blob/master/deps/uv/src/unix/timer.c</a>  timer.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="n">RB_MIN</span><span class="p">(</span><span class="n">uv__timers</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">loop</span><span class="o">-&gt;</span><span class="n">timer_handles</span><span class="p">)</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>pass timeout argument to poll api <a href="https://github.com/joyent/node/blob/master/deps/uv/src/unix/core.c">https://github.com/joyent/node/blob/master/deps/uv/src/unix/core.c</a> core.c</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">timeout</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">mode</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">UV_RUN_NOWAIT</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">timeout</span> <span class="o">=</span> <span class="n">uv_backend_timeout</span><span class="p">(</span><span class="n">loop</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">uv__io_poll</span><span class="p">(</span><span class="n">loop</span><span class="p">,</span> <span class="n">timeout</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>unixのソースですが、Windows系のソースも似ているロジックが入っています。</p>

<p>最高です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js vs C vs Java vs Python]]></title>
    <link href="http://sjitech.github.io/blog/2013/12/19/ji-shi-taitoru/"/>
    <updated>2013-12-19T10:12:00+09:00</updated>
    <id>http://sjitech.github.io/blog/2013/12/19/ji-shi-taitoru</id>
    <content type="html"><![CDATA[<p>Node.js、C、Java、Pythonの比較は複雑ですが、とりあえず、純粋な言語性能を計ってみました。後でもっと現実に近いケースで計りましょう。</p>

<!-- more -->


<p>今回のケースでは、Node.js = 0.85 C = 0.83 Java = 100+ Pythonぐらい。</p>

<p>厳密に言うと、今回はNode.jsの性能ではなくV8 Javascriptのです。</p>

<p>環境: Mac OS X 10.9, Intel Core i7 CPU 4 Core<br/>
テスト内容：オブジェクト割当、配列割当、素数計算<br/>
実行時状況：<br/>
　　CPU：皆 0% (たまにCは100%)<br/>
　　スレッド:<br/>
　　　　Node.js 4個, Cは1個。Javaは17個。<br/>
　　　　※ javascriptは単スレッドですが、それを管理するために別スレッドがあります、数はCPU数とは関係なくほぼ4固定です。<br/>
　　　　JavaはCより早いのは、自動的に並列されるかもしれません？</p>

<p>限定ケースの結果ですのでいろいろ訳あり。<br/>
例えば、C、Pythonはオプティマイズされていない。</p>

<p>ソース：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Node.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/&lt;strong&gt; This code was based on Google I/O 2012:</span>
</span><span class='line'><span class="nx">Breaking</span> <span class="nx">the</span> <span class="nx">JavaScript</span> <span class="nx">Speed</span> <span class="nx">Limit</span> <span class="kd">with</span> <span class="nx">V8</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://www.youtube.com/watch?v=UJPdhx5zTaw&quot;</span><span class="o">&gt;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//www.youtube.com/watch?v=UJPdhx5zTaw&lt;/a&gt;) &lt;/strong&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">Primes</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">prime_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">primes</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">50000</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Primes</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrimeCount</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">prime_count</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nx">Primes</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrime</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">primes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="p">}</span>
</span><span class='line'><span class="nx">Primes</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addPrime</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">primes</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">prime_count</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nx">Primes</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isPrimeDivisible</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">candidate</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">lt</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">prime_count</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="nx">candidate</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">primes</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Primes</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">st</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">getPrimeCount</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">50000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">.</span><span class="nx">isPrimeDivisible</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">p</span><span class="p">.</span><span class="nx">addPrime</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">c</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span><span class="o">-</span><span class="nx">st</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">getPrime</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">getPrimeCount</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">main</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">primes</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Primes</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">prime_count</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">primes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">50000</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPrimeCount</span> <span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">prime_count</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPrime</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">primes</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPrime</span> <span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">primes</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">prime_count</span><span class="o">++]</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPrimeDivisible</span><span class="o">(</span><span class="kt">int</span> <span class="n">candidate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span><span class="n">lt</span><span class="o">;</span> <span class="k">this</span><span class="o">.</span><span class="na">prime_count</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">candidate</span> <span class="o">%</span> <span class="k">this</span><span class="o">.</span><span class="na">primes</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Primes</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Primes</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getPrimeCount</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">50000</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">p</span><span class="o">.</span><span class="na">isPrimeDivisible</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">.</span><span class="na">addPrime</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">c</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">().</span><span class="na">getTime</span><span class="o">()-</span><span class="n">st</span><span class="o">.</span><span class="na">getTime</span><span class="o">());</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getPrime</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getPrimeCount</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">This</span> <span class="n">code</span> <span class="n">was</span> <span class="n">based</span> <span class="n">on</span> <span class="n">Google</span> <span class="n">I</span><span class="o">/</span><span class="n">O</span> <span class="mi">2012</span><span class="o">:</span>
</span><span class='line'><span class="n">Breaking</span> <span class="n">the</span> <span class="n">JavaScript</span> <span class="n">Speed</span> <span class="n">Limit</span> <span class="n">with</span> <span class="n">V8</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.youtube.com/watch?v=UJPdhx5zTaw&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="o">:</span><span class="c1">//www.youtube.com/watch?v=UJPdhx5zTaw&lt;/a&gt;) &lt;/strong&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">time</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">int64_t</span> <span class="n">microSecondOfNow</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">timeval</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">t</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">((</span><span class="kt">int64_t</span><span class="p">)</span> <span class="n">t</span><span class="p">.</span><span class="n">tv_sec</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="n">t</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">class</span> <span class="n">Primes</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">getPrimeCount</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">prime_count</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">getPrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">addPrime</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="n">primes</span><span class="p">[</span><span class="n">prime_count</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bool</span> <span class="n">isPrimeDivisible</span><span class="p">(</span><span class="kt">int</span> <span class="n">candidate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span> <span class="n">prime_count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">candidate</span> <span class="o">%</span> <span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nl">private:</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">prime_count</span><span class="p">;</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">primes</span><span class="p">[</span><span class="mi">50000</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Primes</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">int64_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">microSecondOfNow</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">getPrimeCount</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">50000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">.</span><span class="n">isPrimeDivisible</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="p">.</span><span class="n">addPrime</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">c</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%lld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">microSecondOfNow</span><span class="p">()</span><span class="o">-</span><span class="n">st</span><span class="p">)</span><span class="o">/</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">getPrime</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">getPrimeCount</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Python </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Primes</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">prime_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">50000</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getPrimeCount</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">prime_count</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getPrime</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">addPrime</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">primes</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">prime_count</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">prime_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isPrimeDivisible</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">candidate</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">prime_count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">p</span> <span class="o">=</span> <span class="n">Primes</span><span class="p">()</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">st</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'><span class="k">while</span> <span class="n">p</span><span class="o">.</span><span class="n">getPrimeCount</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">50000</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="o">.</span><span class="n">isPrimeDivisible</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">addPrime</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">-</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">getPrime</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">getPrimeCount</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
